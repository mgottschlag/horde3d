[[FX]]

<Sampler id="fresnel">
	<StageConfig addressMode="CLAMP" />
</Sampler>

<Sampler id="sky">
	<StageConfig addressMode="CLAMP" filtering="BILINEAR" maxAnisotropy="1" />
</Sampler>

<Context id="AMBIENT">
	<Shaders vertex="VS_GENERAL" fragment="FS_AMBIENT" />
</Context>

[[VS_GENERAL]]
// =================================================================================================

#include "shaders/utilityLib/vertCommon.glsl"

varying vec3 color;
uniform vec4 waterInterpolation;
attribute float waterHeight;
attribute float waterHeight2;
attribute vec3 waterNormal;
attribute vec3 waterNormal2;

uniform vec3 viewer;
varying vec3 viewVec;
varying vec3 normal;

void main() {
	vec4 pos = calcWorldPos( gl_Vertex );
	viewVec = normalize(pos.xyz - viewer);

	float interpolation = cos( waterInterpolation.x * 3.1415 / 2.0 ) / 2.0;
	normal = normalize(waterNormal * interpolation + waterNormal2 * (1.0 - interpolation));
	color = reflect( viewVec, waterNormal * interpolation + waterNormal2 * (1.0 - interpolation) );
	color = normalize(color);
	//color = waterNormal * interpolation + waterNormal2 * (1.0 - interpolation);
	//color = normalize(color);
	//color.y *= -1.0;

	gl_Position = gl_ModelViewProjectionMatrix * worldMat * (gl_Vertex
		+ vec4( 0.0, waterHeight * waterInterpolation.x
		+ waterHeight2 * ( 1.0 - waterInterpolation.x ), 0.0, 0.0 ) );
};

[[FS_AMBIENT]]
// =================================================================================================
varying vec3 color;
uniform samplerCube sky;
uniform sampler2D fresnel;
varying vec3 viewVec;
varying vec3 normal;
void main() {
	//gl_FragColor.rgb = color;
	float reflection = texture2D(fresnel, vec2(dot(viewVec, normal), 0.0)).r;
	gl_FragColor = textureCube( sky, color ) * reflection + vec4(0.18, 0.28, 0.26, 0.0) * (1 - reflection);
}
