<Shader>
	<!-- Description for uniform 'hdrParams' values:
		a - Exposure (higher values make scene brighter)
		b - Brightpass threshold (intensity where blooming begins)
		c - BrightPass offset (smaller values produce stronger blooming) 
	-->
	
	<Context id="BRIGHTPASS">
		<RenderConfig writeDepth="false" />
		
		<VertexShader>
			<DefCode>
			<![CDATA[
				varying vec2 texCoord;
				
				void main( void )
				{
					texCoord = gl_MultiTexCoord0.st; 
					gl_Position = gl_ProjectionMatrix * gl_Vertex;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<InsCode code="utilityLib/fragPostProcess.glsl" />
			<DefCode>
			<![CDATA[
				uniform sampler2D tex0;
				uniform vec2 frameBufSize;
				uniform vec4 hdrParams;
				varying vec2 texCoord;
				
				void main( void )
				{
					vec2 texSize = frameBufSize * 4.0;
					vec2 coord2 = texCoord + vec2( 2, 2 ) / texSize;
					
					// Average using bilinear filtering
					vec4 sum = getTex2DBilinear( tex0, texCoord, texSize );
					sum += getTex2DBilinear( tex0, coord2, texSize );
					sum += getTex2DBilinear( tex0, vec2( coord2.x, texCoord.y ), texSize );
					sum += getTex2DBilinear( tex0, vec2( texCoord.x, coord2.y ), texSize );
					sum /= 4.0;
					
					// Tonemap
					//sum = 1.0 - exp2( -hdrParams.x * sum );
					
					// Extract bright values
					sum = max( sum - hdrParams.y, 0.0 );
					sum /= hdrParams.z + sum;
					
					gl_FragColor = sum;
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
	
	<Context id="BLUR">
		<RenderConfig writeDepth="false" />
		
		<VertexShader>
			<DefCode>
			<![CDATA[
				varying vec2 texCoord;
				
				void main( void )
				{
					texCoord = gl_MultiTexCoord0.st; 
					gl_Position = gl_ProjectionMatrix * gl_Vertex;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<InsCode code="utilityLib/fragPostProcess.glsl" />
			<DefCode>
			<![CDATA[
				uniform sampler2D tex0;
				uniform vec2 frameBufSize;
				uniform vec4 blurParams;
				varying vec2 texCoord;
				
				void main( void )
				{
					gl_FragColor = blurKawase( tex0, texCoord, frameBufSize, blurParams.x );
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
	
	<Context id="FINALPASS">
		<RenderConfig writeDepth="false" />
		
		<VertexShader>
			<DefCode>
			<![CDATA[
				varying vec2 texCoord;
				
				void main( void )
				{
					texCoord = gl_MultiTexCoord0.st; 
					gl_Position = gl_ProjectionMatrix * gl_Vertex;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<DefCode>
			<![CDATA[
				uniform sampler2D tex0, tex1;
				uniform vec2 frameBufSize;
				uniform vec4 hdrParams;
				varying vec2 texCoord;
				
				void main( void )
				{
					vec4 col0 = texture2D( tex0, texCoord );	// HDR color
					vec4 col1 = texture2D( tex1, texCoord );	// Bloom
					
					// Tonemap
					vec4 col = 1.0 - exp2( -hdrParams.x * col0 );
					
					gl_FragColor = col + col1;
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
</Shader>
