<Shader>
	<Context id="ATTRIBPASS">
		<VertexShader>
			<InsCode code="utilityLib/vertCommon.glsl" />
			<DefCode>
			<![CDATA[
				uniform vec3 viewer;
				attribute vec2 texCoords0;
				attribute vec3 normal;
				varying vec3 tsbNormal;
				varying vec4 pos;
				varying vec2 texCoords;
			
				void main( void )
				{
					// Calculate normal
					tsbNormal = calcWorldVec( normal );
				
					// Calculate world space position
					pos = calcWorldPos( gl_Vertex );
					
					// Calculate texture coordinates and clip space position
					texCoords = texCoords0;
					gl_Position = gl_ModelViewProjectionMatrix * pos;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<InsCode code="utilityLib/fragDeferredWrite.glsl" />
			<DefCode>
			<![CDATA[
				uniform sampler2D tex0;
				varying vec3 tsbNormal;
				varying vec4 pos;
				varying vec2 texCoords;
				
				void main( void )
				{
					vec4 albedo = texture2D( tex0, texCoords );
					if( albedo.a < 0.5 ) discard;
					
					setMatID( 1.0 );
					setPos( pos.xyz );
					setNormal( normalize( tsbNormal ) );
					setAlbedo( albedo.rgb );
					setSpecMask( 0.2 );
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
	
	
	<Context id="SHADOWMAP">
		<VertexShader>
			<InsCode code="utilityLib/vertCommon.glsl" />
			<DefCode>
			<![CDATA[
				uniform vec4 lightPos;
				attribute vec2 texCoords0;
				varying float dist;
				varying vec2 texCoords;
				
				void main( void )
				{
					vec4 pos = calcWorldPos( gl_Vertex );
					dist = length( lightPos.xyz - pos.xyz ) / lightPos.w;
					
					// Calculate texture coordinates and clip space position
					texCoords = texCoords0;
					gl_Position = gl_ModelViewProjectionMatrix * pos;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<DefCode>
			<![CDATA[
				uniform float shadowBias;
				uniform sampler2D tex0;
				varying float dist;
				varying vec2 texCoords;
				
				void main( void )
				{
					vec4 albedo = texture2D( tex0, texCoords );
					if( albedo.a < 0.5 ) discard;
					
					gl_FragDepth = dist + shadowBias;
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
	
	
	<Context id="LIGHTING">
		<RenderConfig writeDepth="false" blendMode="ADD" />
		
		<VertexShader>
			<InsCode code="utilityLib/vertCommon.glsl" />
			<DefCode>
			<![CDATA[
				uniform vec3 viewer;
				attribute vec2 texCoords0;
				attribute vec3 normal;
				varying vec3 tsbNormal;
				varying vec4 pos, vsPos;
				varying vec2 texCoords;
			
				void main( void )
				{
					// Calculate normal
					tsbNormal = calcWorldVec( normal );
				
					// Calculate world and view space positions
					pos = calcWorldPos( gl_Vertex );
					vsPos = calcViewPos( pos );
					
					// Calculate texture coordinates and clip space position
					texCoords = texCoords0;
					gl_Position = gl_ModelViewProjectionMatrix * pos;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<InsCode code="utilityLib/fragLighting.glsl" />
			<DefCode>
			<![CDATA[
				uniform sampler2D tex0;
				varying vec3 tsbNormal;
				varying vec4 pos, vsPos;
				varying vec2 texCoords;
				
				void main( void )
				{
					vec4 albedo = texture2D( tex0, texCoords );
					if( albedo.a < 0.5 ) discard;
					
					gl_FragColor.rgb =
						calcPhongSpotLight( pos.xyz, normalize( tsbNormal ), albedo.rgb, 0.2, 16.0, -vsPos.z, 0.3 );
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
	
	
	<Context id="AMBIENT">
		<VertexShader>
			<InsCode code="utilityLib/vertCommon.glsl" />
			<DefCode>
			<![CDATA[
				attribute vec2 texCoords0;
				attribute vec3 normal;
				varying vec3 tsbNormal;
				varying vec2 texCoords;
				
				void main( void )
				{
					tsbNormal = calcWorldVec( normal );
					vec4 pos = calcWorldPos( gl_Vertex );
					
					// Calculate texture coordinates and clip space position
					texCoords = texCoords0;
					gl_Position = gl_ModelViewProjectionMatrix * pos;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<DefCode>
			<![CDATA[
				uniform sampler2D tex0;
				uniform samplerCube tex7;
				varying vec3 tsbNormal;
				varying vec2 texCoords;
				
				void main( void )
				{
					vec4 albedo = texture2D( tex0, texCoords );
					if( albedo.a < 0.5 ) discard;
					
					gl_FragColor.rgb = albedo.rgb * textureCube( tex7, tsbNormal ).rgb;
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
</Shader>