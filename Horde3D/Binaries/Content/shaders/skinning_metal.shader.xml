<Shader>
	<Context id="ATTRIBPASS">
		<VertexShader>
			<InsCode code="utilityLib/vertCommon.glsl" />
			<InsCode code="utilityLib/vertSkinning.glsl" />
			<DefCode>
			<![CDATA[
				uniform vec3 viewer;
				attribute vec2 texCoords0;
				attribute vec3 normal;
				//attribute vec3 tangent, bitangent;
				varying vec4 pos;
				varying vec2 texCoords;
				varying vec3 tsbNormal;
				//varying vec3 tsbTangent, tsbBitangent;
				
				void main( void )
				{
					mat4 skinningMat = calcSkinningMat();
					mat3 skinningMatVec = getSkinningMatVec( skinningMat );
					
					// Calculate tangent space basis
					tsbNormal = calcWorldVec( skinVec( normal, skinningMatVec ) );
					//tsbTangent = calcWorldVec( skinVec( tangent, skinningMatVec ) );
					//tsbBitangent = calcWorldVec( skinVec( bitangent, skinningMatVec ) );
					
					// Calculate world space position
					pos = calcWorldPos( skinPos( gl_Vertex, skinningMat ) );
					
					// Calculate texture coordinates and clip space position
					texCoords = texCoords0;
					gl_Position = gl_ModelViewProjectionMatrix * pos;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<InsCode code="utilityLib/fragDeferredWrite.glsl" />
			<DefCode>
			<![CDATA[
				uniform sampler2D tex0;
				varying vec3 tsbNormal;
				varying vec4 pos;
				varying vec2 texCoords;

				void main( void )
				{
					vec3 albedo = texture2D( tex0, texCoords ).rgb;
					
					setMatID( 1.0 );
					setPos( pos.xyz );
					setNormal( normalize( tsbNormal ) );
					setAlbedo( albedo );
					setSpecMask( 0.5 );
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
	
	
	<Context id="SHADOWMAP">	
		<VertexShader>
			<InsCode code="utilityLib/vertCommon.glsl" />
			<InsCode code="utilityLib/vertSkinning.glsl" />
			<DefCode>
			<![CDATA[
				uniform vec4 lightPos;
				varying float dist;
			
				void main( void )
				{
					vec4 pos = calcWorldPos( skinPos( gl_Vertex ) );
					dist = length( lightPos.xyz - pos.xyz ) / lightPos.w;
					
					gl_Position = gl_ModelViewProjectionMatrix * pos;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<DefCode>
			<![CDATA[
				uniform float shadowBias;
				varying float dist;
				
				void main( void )
				{
					gl_FragDepth = dist + shadowBias;
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
	
	
	<Context id="LIGHTING">
		<RenderConfig writeDepth="false" blendMode="ADD" />
		
		<VertexShader>
			<InsCode code="utilityLib/vertCommon.glsl" />
			<InsCode code="utilityLib/vertSkinning.glsl" />
			<DefCode>
			<![CDATA[
				attribute vec2 texCoords0;
				attribute vec3 normal;
				//attribute vec3 tangent, bitangent;
				varying vec4 pos, vsPos;
				varying vec2 texCoords;
				varying vec3 tsbNormal;
				//varying vec3 tsbTangent, tsbBitangent;

				void main( void )
				{
					// Calculate skinning matrices
					mat4 skinningMat = calcSkinningMat();
					mat3 skinningMatVec = getSkinningMatVec( skinningMat );
					
					// Calculate tangent space basis
					tsbNormal = calcWorldVec( skinVec( normal, skinningMatVec ) );
					//tsbTangent = calcWorldVec( skinVec( tangent, skinningMatVec ) );
					//tsbBitangent = calcWorldVec( skinVec( bitangent, skinningMatVec ) );
				
					// Calculate world and view space positions
					pos = calcWorldPos( skinPos( gl_Vertex, skinningMat ) );
					vsPos = calcViewPos( pos );
					
					// Calculate texture coordinates and clip space position
					texCoords = texCoords0;
					gl_Position = gl_ModelViewProjectionMatrix * pos;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<InsCode code="utilityLib/fragLighting.glsl" />
			<DefCode>
			<![CDATA[
				uniform sampler2D tex0;
				varying vec3 tsbNormal;
				varying vec4 pos, vsPos;
				varying vec2 texCoords;

				void main( void )
				{
					vec3 albedo = texture2D( tex0, texCoords ).rgb;
					
					gl_FragColor.rgb =
						calcPhongSpotLight( pos.xyz, normalize( tsbNormal ), albedo, 0.2, 32.0, -vsPos.z, 0.3 );
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
	
	
	<Context id="AMBIENT">
		<VertexShader>
			<InsCode code="utilityLib/vertCommon.glsl" />
			<InsCode code="utilityLib/vertSkinning.glsl" />
			<DefCode>
			<![CDATA[
				attribute vec3 normal;
				varying vec4 pos;
				varying vec3 tsbNormal;
				
				void main( void )
				{
					mat4 skinningMat = calcSkinningMat();
					mat3 skinningMatVec = getSkinningMatVec( skinningMat );
					
					tsbNormal = calcWorldVec( skinVec( normal, skinningMatVec ) );
				
					pos = calcWorldPos( skinPos( gl_Vertex, skinningMat ) );
					gl_Position = gl_ModelViewProjectionMatrix * pos;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<DefCode>
			<![CDATA[
				uniform vec3 viewer;
				uniform samplerCube tex1;
				varying vec4 pos;
				varying vec3 tsbNormal;
			
				void main( void )
				{
					vec3 refl = textureCube( tex1, reflect( pos.xyz - viewer, normalize( tsbNormal ) ) ).rgb;
					gl_FragColor.rgb = refl * 1.5;
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
</Shader>